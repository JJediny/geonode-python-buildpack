#!/usr/bin/env bash

GEONODE_VENDOR="https://s3.amazonaws.com/boundlessps-public/cf/vendor.tar.gz"
GDAL_PYTHON="https://s3.amazonaws.com/boundlessps-public/cf/python.tar.gz"

PKG_CONFIG_PATH="/app/.heroku/vendor/lib/pkgconfig:$PKG_CONFIG_PATH"

# Syntax sugar.
source $BIN_DIR/utils

bpwatch start geonode_gdal_install

# If GeoNode exists within requirements, use vendored gdal, geos and proj.
if (pip-grep -s requirements.txt geonode-notification &> /dev/null) then

  echo "-----> Noticed GeoNode. Bootstrapping gdal, geos and proj."
  mkdir -p .heroku/
  # Download and extract binaries + libraries into target vendor directory.
  curl $GEONODE_VENDOR -s | tar zxv -C .heroku/ &> /dev/null
  echo "-----> Creating symbolic links for geonode libs"
  cd .heroku/vendor/lib/
  find -type l -delete
  ln -s libgdal.so.20.0.1 libgdal.so
  ln -s libgdal.so.20.0.1 libgdal.so.20
  ln -s libgeos_c.so.1.9.0 libgeos_c.so
  ln -s libgeos_c.so.1.9.0 libgeos_c.so.1
  ln -s libgeos-3.5.0.so libgeos.so
  ln -s libproj.so.9.1.0 libproj.so
  ln -s libproj.so.9.1.0 libproj.so.9
  cd ../../../
  echo "-----> Bootstrapping gdal python modules"
  curl $GDAL_PYTHON -s | tar zxv -C .heroku/ &> /dev/null

  mkdir -p .profile.d/
  echo "-----> Adding profile.d script for geonode"
  cat <<EOF > .profile.d/geonode.sh
export PATH="/app/.heroku/vendor/bin:/app/.heroku/python/bin:\$PATH"
export LD_LIBRARY_PATH="/app/.heroku/vendor/lib/:/app/.heroku/python/lib/:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="/app/.heroku/vendor/lib/:/app/.heroku/python/lib/:\$LIBRARY_PATH"
export INCLUDE_PATH="/app/.heroku/vendor/include/:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export GDAL_DATA="/app/.heroku/vendor/share/gdal"
export PROJ_LIB="/app/.heroku/vendor/share/proj"
export GEOS_LIBRARY_PATH="/app/.heroku/vendor/lib"
EOF
fi

bpwatch stop geonode_gdal_install