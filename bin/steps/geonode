#!/usr/bin/env bash

GEONODE_VENDOR="https://s3.amazonaws.com/boundlessps-public/cf/vendor.tar.gz"
GDAL_PYTHON="https://s3.amazonaws.com/boundlessps-public/cf/python.tar.gz"

PKG_CONFIG_PATH="/app/.heroku/vendor/lib/pkgconfig:$PKG_CONFIG_PATH"

# Syntax sugar.
source $BIN_DIR/utils

bpwatch start geonode_gdal_install

# If GeoNode exists within requirements, use vendored gdal, geos and proj.
if test -f cf/requirements.txt; then
  echo "-----> Identified as a GeoNode CF Application"
  echo "-----> Bootstrapping GDAL-2.0.1 Libs"
  echo "-----> Bootstrapping GEOS-3.5.0 Libs"
  echo "-----> Bootstrapping PROJ-4.9.2 Libs"
  mkdir -p .heroku/
  # Download and extract binaries + libraries into target vendor directory.
  curl $GEONODE_VENDOR -s | tar zxv -C .heroku/ &> /dev/null
  echo "-----> Creating Symbolic Links for Libs"
  cd .heroku/vendor/lib/
  find -type l -delete
  # gdal
  ln -s libgdal.so.20.0.1 libgdal.so
  ln -s libgdal.so.20.0.1 libgdal.so.20
  # geos
  ln -s libgeos_c.so.1.9.0 libgeos_c.so
  ln -s libgeos_c.so.1.9.0 libgeos_c.so.1
  ln -s libgeos-3.5.0.so libgeos.so
  # proj
  ln -s libproj.so.9.1.0 libproj.so
  ln -s libproj.so.9.1.0 libproj.so.9
  # libkml
  ln -s libkmlbase.so.0.0.0 libkmlbase.so
  ln -s libkmlbase.so.0.0.0 libkmlbase.so.0
  ln -s libkmlconvenience.so.0.0.0 libkmlconvenience.so
  ln -s libkmlconvenience.so.0.0.0 libkmlconvenience.so.0
  ln -s libkmldom.so.0.0.0 libkmldom.so
  ln -s libkmldom.so.0.0.0 libkmldom.so.0
  ln -s libkmlengine.so.0.0.0 libkmlengine.so
  ln -s libkmlengine.so.0.0.0 libkmlengine.so.0
  ln -s libkmlregionator.so.0.0.0 libkmlregionator.so
  ln -s libkmlregionator.so.0.0.0 libkmlregionator.so.0
  ln -s libkmlxsd.so.0.0.0 libkmlxsd.so
  ln -s libkmlxsd.so.0.0.0 libkmlxsd.so.0
  ln -s libminizip.so.0.0.0 libminizip.so
  ln -s libminizip.so.0.0.0 libminizip.so.0
  ln -s liburiparser.so.1.0.5 liburiparser.so
  ln -s liburiparser.so.1.0.5 liburiparser.so.1
  # libecwj2
  ln -s libNCSCnet.so.0.0.0 libNCSCnet.so
  ln -s libNCSCnet.so.0.0.0 libNCSCnet.so.0
  ln -s libNCSEcwC.so.0.0.0 libNCSEcwC.so
  ln -s libNCSEcwC.so.0.0.0 libNCSEcwC.so.0
  ln -s libNCSEcw.so.0.0.0 libNCSEcw.so
  ln -s libNCSEcw.so.0.0.0 libNCSEcw.so.0
  ln -s libNCSUtil.so.0.0.0 libNCSUtil.so
  ln -s libNCSUtil.so.0.0.0 libNCSUtil.so.0
  # MrSID_DSDK
  ln -s libltidsdk.so.8 libltidsdk.so
  ln -s liblti_lidar_dsdk.so.1 liblti_lidar_dsdk.so
  cd ../../../
  echo "-----> Bootstrapping GDAL Python Modules"
  curl $GDAL_PYTHON -s | tar zxv -C .heroku/ &> /dev/null

  mkdir -p .profile.d/
  echo "-----> Adding profile.d Script for added Libs"
  cat <<EOF > .profile.d/geonode.sh
export PATH="/app/.heroku/vendor/bin:/app/.heroku/python/bin:\$PATH"
export LD_LIBRARY_PATH="/app/.heroku/vendor/lib/:/app/.heroku/python/lib/:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="/app/.heroku/vendor/lib/:/app/.heroku/python/lib/:\$LIBRARY_PATH"
export INCLUDE_PATH="/app/.heroku/vendor/include/:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export GDAL_DATA="/app/.heroku/vendor/share/gdal"
export PROJ_LIB="/app/.heroku/vendor/share/proj"
export GEOS_LIBRARY_PATH="/app/.heroku/vendor/lib"
EOF
fi

bpwatch stop geonode_gdal_install